generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String             @id @default(cuid())
  name        String
  email       String             @unique
  phone       String?
  address     String?
  status      OrganizationStatus @default(ACTIVE)
  plan        String             @default("basic") // basic, premium, enterprise
  maxUsers    Int                @default(10)
  maxPatients Int                @default(1000)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  users        User[]
  patients     Patient[]
  appointments Appointment[]
  services     Service[]

  @@map("organizations")
}

model User {
  id             String    @id @default(cuid())
  username       String    @unique
  email          String    @unique
  password       String    // Hashed password
  name           String?
  phone          String?
  role           UserRole  @default(DENTIST)
  organizationId String?   // Null for SUPER_ADMIN
  image          String?
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  accounts     Account[]
  sessions     Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Patient {
  id             String   @id @default(cuid())
  name           String
  email          String?
  phone          String
  birthDate      DateTime?
  address        String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@unique([phone, organizationId])
  @@map("patients")
}

model Service {
  id             String @id @default(cuid())
  name           String
  duration       Int    // duration in minutes
  price          Float?
  organizationId String

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@unique([name, organizationId])
  @@map("services")
}

model Appointment {
  id             String            @id @default(cuid())
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(SCHEDULED)
  notes          String?
  reminderSent   Boolean           @default(false)
  confirmedAt    DateTime?
  organizationId String
  patientId      String
  dentistId      String
  serviceId      String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  dentist      User         @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  service      Service?     @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("appointments")
}

enum UserRole {
  SUPER_ADMIN    // Can manage all organizations
  CLINIC_ADMIN   // Can manage users within their organization
  DENTIST
  RECEPTIONIST
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
